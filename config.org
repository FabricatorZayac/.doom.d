#+STARTUP: overview

* Org-mode
#+begin_src emacs-lisp :tangle yes
(setq org-directory "~/org/")
#+end_src
** org-bullets
#+begin_src emacs-lisp :tangle yes
(use-package! org-bullets
  :hook (org-mode . (lambda () (org-bullets-mode 1))))
#+end_src

* Evil-mode
I always bind ; to : in vim. Nice to have 1 less key stroke
#+begin_src emacs-lisp :tangle yes
(evil-global-set-key 'normal (kbd ";") 'evil-ex)
#+end_src

I still don't know how this works, but I'm just gonna put this here, so undo-tree works
#+begin_src emacs-lisp :tangle yes
(setq evil-undo-system 'undo-tree)
#+end_src

Make stuffs
#+begin_src emacs-lisp :tangle yes
(evil-define-key 'normal 'prog-mode-map (kbd "SPC c m") '+make/run)
#+end_src

Evil-increment
#+begin_src emacs-lisp :tangle yes
(evil-define-key 'normal 'prog-mode-map (kbd "C-a") 'evil-numbers/inc-at-pt-incremental)
#+end_src

Buffer movement and resize
#+begin_src emacs-lisp :tangle yes
(evil-global-set-key 'normal (kbd "C-h") 'evil-window-left)
(evil-global-set-key 'normal (kbd "C-j") 'evil-window-down)
(evil-global-set-key 'normal (kbd "C-k") 'evil-window-up)
(evil-global-set-key 'normal (kbd "C-l") 'evil-window-right)

(evil-global-set-key 'normal (kbd "M-h") 'evil-window-decrease-width)
(evil-global-set-key 'normal (kbd "M-j") 'evil-window-increase-height)
(evil-global-set-key 'normal (kbd "M-k") 'evil-window-decrease-height)
(evil-global-set-key 'normal (kbd "M-l") 'evil-window-increase-width)

;; (evil-global-set-key 'normal (kbd "C-H") '+evil/window-move-left)
;; (evil-global-set-key 'normal (kbd "C-J") '+evil/window-move-down)
;; (evil-global-set-key 'normal (kbd "C-K") '+evil/window-move-up)
;; (evil-global-set-key 'normal (kbd "C-L") '+evil/window-move-right)
#+end_src

* Languages
** Rust
rust-analyzer
#+begin_src emacs-lisp :tangle yes
(after! rustic
  (setq rustic-analyzer-command '("rust-analyzer"))
  (setq rustic-lsp-server 'rust-analyzer)
  (setq lsp-rust-analyzer-diagnostics-disabled ["unresolved-proc-macro"]))
#+end_src

** C
clang-format
#+begin_src emacs-lisp :tangle yes
(use-package! clang-format+
  :hook ((c-mode . clang-format+-mode)
         (arduino-mode . clang-format+-mode)))
#+end_src

clang-tidy
#+begin_src emacs-lisp :tangle yes
(use-package! flycheck-clang-tidy
  :after flycheck
  :hook (flycheck-mode . flycheck-clang-tidy-setup))
#+end_src

#+begin_src emacs-lisp :tangle yes
(after! flycheck-clang-tidy
  (add-hook! 'c-mode-hook (flycheck-select-checker 'c/c++-clang-tidy)))
#+end_src

** ATS
#+begin_src emacs-lisp :tangle yes
(use-package! ats-mode
  :after flycheck
  :hook (ats-mode . flycheck-ats2-setup))
#+end_src

* Look and feel
** Elcord
#+begin_src emacs-lisp :tangle yes
;; (elcord-mode)
#+end_src

** Theme
My fav colorscheme
#+begin_src emacs-lisp :tangle yes
(setq doom-theme 'doom-gruvbox)
(setq doom-gruvbox-dark-variant "hard")
#+end_src

** Font
My current fav monospace font
#+begin_src emacs-lisp :tangle yes
(setq doom-font (font-spec :family "Source Code Pro" :size 14))
#+end_src

** General
#+begin_src emacs-lisp :tangle yes
(add-hook 'prog-mode-hook 'display-fill-column-indicator-mode)
(setq display-line-numbers-type 'relative)
#+end_src

